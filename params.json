{"name":"BAC0","tagline":"BAC0 - Library depending on BACpypes (Python 3) to build automation script for bacnet applications","body":".. BAC0 documentation master file\r\n\r\nBAC0 is a Python 3 scripting application that uses BACpypes to process bacnet messages on a IP network. \r\nThis library brings out simple commands to browse a bacnet network, read properties from bacnet devices or write to them.\r\n\r\nPython is a simple language to learn and a very powerful tool for data processing. Coupled to bacnet, it becomes a great \r\ntool to test devices an interact with controllers.\r\n\r\n#Test driven development (TDD) for DDC controls\r\n-----------------------------------------------\r\nBAC0 allows users to simply test an application even if sensors are not connected to the controller. Using the out_of_service\r\nproperty, it's easy to write a value to the input so the controller will think an input is conencted. \r\n\r\nWithout a program like BAC0, you can rely on your DDC programming tool... but it is often slow and\r\nevery test must be done manually.\r\n\r\nNow you can write your test and run them as often as you want.\r\n\r\n##How to use it\r\n---------------\r\n\r\nExample::\r\n\r\n    import BAC0\r\n    bacnet = BAC0.ReadWriteScript()\r\n\r\n    # Define a controller (this one is on MSTP #3, MAC addr 4, device ID 5504)    \r\n    mycontroller = BAC0.device('3:4', 5504, bacnet)\r\n\r\n    # Simulate an input (out_of_service -> true)\r\n    # Use 10 as the value for pointName\r\n    mycontroller.sim('pointName 10')\r\n\r\n    # Release the simulation\r\n    mycontroller.release('pointName')\r\n\r\n    # Release all simulated points\r\n    mycontroller.releaseAll()\r\n\r\n    # Write to a point\r\n    mycontroller.write('pointName active')\r\n\r\n    # Write to relinquish default\r\n    mycontroller.default('pointName 120')\r\n\r\n    # Read\r\n    mycontroller.read('pointName can be more than one word')\r\n\r\nNow you can build simple tests using assert syntax for example and make your DDC code stronger.\r\n\r\n###Assert ?\r\n-----------\r\nLet's say your sequence is really simple. Something like this : \r\n\r\n####System stopped\r\n==================\r\nWhen system is stopped, fan must be off, dampers must be closed, heater cannot operate.\r\n\r\n####System started\r\n==================\r\nWhen system starts, fan command will be on. Dampers will open to minimum position.\r\nIf fan status turns on, heating sequence will starts.\r\n\r\nAnd so on...\r\n\r\n###How would I test that ?\r\n**************************\r\n*Controller is defined and its variable name is mycontroller\r\n*Fan command = SF-C\r\n*Fan Status = SF-S\r\n*Dampers command = MAD-O\r\n*Heater = RH-O\r\n*Occupancy command = OCC-SCHEDULE\r\n\r\nSystem Stopped Test Code::\r\n\r\n    mycontroller.write('OCC-SCHEDULE Unoccupied')\r\n    time.sleep(10)\r\n    assert mycontroller.read('SF-C').value() == 'Off'\r\n    assert mycontroller.read('MAD-O').value() == 0\r\n    assert mycontroller.read('RH-O').value() == 0\r\n\r\n    # Simulate fan status as SF-C is Off\r\n    mycontroller.sim('SF-S Off')\r\n\r\nSytstem Started Test Code::\r\n\r\n    mycontroller.write('OCC-SCHEDULE Occupied')\r\n    time.sleep(10)\r\n    assert mycontroller.read('SF-C').value() == 'On'\r\n    # Give status\r\n    mycontroller.sim('SF-S On')\r\n    time.sleep(15)\r\n    assert mycontroller.read('MAD-O') == mycontroller.read('MADMIN-POS')\r\n\r\nAnd so on...\r\n\r\nYou are now able to define any test you want. You will probably use more precise conditions\r\ninstead of time.sleep() function (example read a value that tells actual mode is active)\r\n\r\nYou can then test random temperature values, build functions that will simulate discharge air\r\ntemperature depending on heatign or cooling stages... it's up to you !\r\n\r\n##Where to download\r\n-------------------\r\nhttp://christiantremblay.github.io/BAC0/\r\n\r\n##What you need\r\n---------------\r\nBAC0 is based on BACpypes found here::\r\n\r\n    git clone https://github.com/JoelBender/bacpypes.git\r\n\r\nBacpypes is now available for python 2.5, 2.7 and 3.4. You can also download it using Pypy.\r\n\r\nYou will also need Pandas as data processing is so easier with this !\r\n\r\nIf running Python on Windows, I recommend the use of complete distributions like Anaconda or Enthought Canopy.\r\n\r\n##How to install BAC0\r\n---------------------\r\nOnce the repo has been cloned, use::\r\n\r\n    python setup.py install\r\n\r\n##Demo in a Jupyter Notebook\r\n----------------------------\r\nWhen installed, module can be used to script communication with bacnet device.\r\nJupyter Notebooks are an excellent way to test it\r\n\r\nhttps://github.com/ChristianTremblay/BAC0/blob/master/Jupyter/BAC0.ipynb\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}